@page "/counter"
@using MediatR
@using OnlineShop.Domain.Customers.Commands
@using OnlineShop.Persistence.Interfaces

@inject IMediator _mediator
@inject ICustomerRepository _customerRepo

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="Create">Create</button>
<button class="btn btn-primary" @onclick="Update">Update</button>
<button class="btn btn-primary" @onclick="Delete">Delete</button>
<button class="btn btn-primary" @onclick="GetAsync">GET</button>

@code {
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }

    private async Task Create()
    {
        // var createCommand = new CreateCustomerCommand
        // {
        //     NameStyle = false, 
        //     Title = "test", 
        //     FirstName = "test", 
        //     MiddleName = "test", 
        //     LastName = "testff",
        //     Suffix = "suff",
        //     CompanyName = "Dummy",
        //     SalesPerson = "|f", 
        //     EmailAddress = "stupid.email.com", 
        //     Phone = "5552234", 
        //     Password = "few"
        // };
        //
        // await _mediator.Send(createCommand);

        var test = await _customerRepo.GetCustomersAsync(58,15);
    }

    private async Task Update()
    {
        var updateCustomerCommand = new UpdateCustomerCommand()
        {
            Id = 30122,
            NameStyle = false,
            Title = "test2",
            FirstName = "test_up_2",
            MiddleName = "test_up_2",
            LastName = "testff_up_2",
            Suffix = "suff_up",
            CompanyName = "Dummy",
            SalesPerson = "|f",
            EmailAddress = "stupid.email.com",
            Phone = "5552234",
            Password = "NewPass"
        };

        await _mediator.Send(updateCustomerCommand);
    }

    private async Task Delete()
    {
        var command = new DeleteCustomerCommand()
        {
            Id = 30119
        };

        await _mediator.Send(command);
    }

    private async Task GetAsync()
    {
        var command = new GetCustomersCommand() { Filter = (x => x.FirstName == "test"), Includes = new string[] { "CustomerAddresses", "SalesOrderHeaders" } };
        await _mediator.Send(command);
    }
}
