@page "/ProductCategory/Create"
@using MediatR
@using OnlineShop.Domain.ProductCategories.Commands
@using OnlineShop.Domain.ProductCategories.Queries
@inject IMediator Mediator;
@inject NavigationManager NavManager;

<EditForm Model="Model" OnValidSubmit="@SaveItem">
    <div class="form-group">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <label for="exampleFormControlInput1">Name</label>
        <InputText type="text" @bind-Value="Model.ProductName" class="form-control" id="exampleFormControlInput1" placeholder="name@example.com"/>
    </div>
    <div class="form-group">
        <label for="exampleFormControlSelect1">Parent Category</label>
        <InputSelect class="form-control" @bind-Value="Model.ChosenParentCategory">
            @foreach (var data in ProductCategories)
            {
                        <option>@data.Name</option>
            }
            <option></option>
        </InputSelect>
    </div>
    <button type="submit" class="btn btn-secondary mt-1">Submit</button>
    <button type="button" class="btn btn-secondary mt-1" @onclick="RedirectToHome">Back</button> 
</EditForm>

@code {

    public int CurrentId { get; set; }
    public CreateItemModel Model { get; set; } = new CreateItemModel() { ChosenParentCategory = "", ProductName = "" };
    public List<ProductCategoryQueryResult> ProductCategories { get; set; } = new List<ProductCategoryQueryResult>();

    protected override async Task OnInitializedAsync()
    {
        var secondCommand = new GetAllProductCategoriesCommand();
        ProductCategories = await Mediator.Send(secondCommand) ?? new List<ProductCategoryQueryResult>();
    }

    private void RedirectToHome()
    {
        NavManager.NavigateTo($"/");
    }

    private async Task SaveItem()
    {
        var id = ProductCategories.First(x => x.Name == Model.ChosenParentCategory).Id;
        var command = new CreateProductCategoryCommand() { Name = Model.ProductName, ParentProductCategoryId = id };
        await Mediator.Send(command);
    }

}
