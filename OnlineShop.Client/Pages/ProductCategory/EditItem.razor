@page "/ProductCategory/Edit/{productId}"
@using MediatR
@using OnlineShop.Domain.ProductCategories.Commands
@using OnlineShop.Domain.ProductCategories.Queries
@inject IMediator Mediator;
@inject NavigationManager NavManager;

<EditForm Model="Model" OnValidSubmit="@UpdateProductCategory">
    <div class="form-group">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <label for="exampleFormControlInput1">Name</label>
        <InputText type="text" @bind-Value="Model.ProductName" class="form-control" id="exampleFormControlInput1" placeholder="name@example.com"/>
    </div>
    <div class="form-group">
        <label for="exampleFormControlSelect1">Parent Category</label>
        <InputSelect class="form-control" @bind-Value="Model.ChosenParentCategory">
            @foreach (var data in ProductCategories)
            {
                    <option>@data.Name</option>
            }
            <option></option>
        </InputSelect>
    </div>
    
    <button type="submit" class="btn btn-success mt-1">Submit</button>
    <button type="button" class="btn btn-secondary mt-1" @onclick="RedirectToList" >Back</button>
    <button type="button" class="btn btn-danger mt-1" @onclick="Delete" >Delete</button>
</EditForm>

@code {
    [Parameter]
    public string ProductId { get; set; }

    public int CurrentId { get; set; }
    public EditItemModel Model { get; set; } = new EditItemModel() { ChosenParentCategory = "", ProductName = "" };
    public List<ProductCategoryQueryResult> ProductCategories { get; set; } = new List<ProductCategoryQueryResult>();

    protected override async Task OnInitializedAsync()
    {
        var command = new GetProductCategoryCommand() { Id = int.Parse(ProductId)};
        var result = await Mediator.Send(command);
        var secondCommand = new GetAllProductCategoriesCommand();

        if (result.ParentProductCategory is not null) 
            Model.ChosenParentCategory = result.ParentProductCategory.Name;

        Model.ProductCount = result.ProductCount;
        ProductCategories = await Mediator.Send(secondCommand) ?? new List<ProductCategoryQueryResult>();
        Model.ProductName = result.Name;
    }

    private async Task Delete()
    {
        if (Model.ProductCount != 0)
        {
            return;
        }

        var command = new DeleteProductCategoryCommand() { Id = int.Parse(ProductId) };
        await Mediator.Send(command);
    }


    private void RedirectToList()
    {
        NavManager.NavigateTo($"/ProductCategory/List");
    }

    private async Task UpdateProductCategory()
    {
        var id = ProductCategories.First(x => x.Name == Model.ChosenParentCategory).Id;
        var command = new UpdateProductCategoryCommand() { Id = int.Parse(ProductId),Name = Model.ProductName, ParentProductCategoryId = id  };
        await Mediator.Send(command);
    }

}
