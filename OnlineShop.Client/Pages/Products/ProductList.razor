@page "/product/list"
@using OnlineShop.Domain.Products.Queries
@using MediatR
@using OnlineShop.Domain.Products.Commands
@inject IMediator Mediator;
@inject NavigationManager NavManager;

@if (_data == null)
{
    <p><em>Loading...</em></p>
}
else
{
    if (_errors.Count > 0)
    {
        
        @foreach (var item in _errors)
        {
            <div class="alert alert-danger" role="alert">
                @item
            </div>
        }
        
    }
   
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Product Number</th>
            <th>Color</th>
            <th>Standard Cost</th>
            <th>Weight</th>
            <th>Sell end date</th>
            <th>Order count</th>
            <th>Pic</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var product in _data)
        {
            <tr>
                <td>@product.Name</td>
                <td>@product.ProductNumber</td>
                <td>@product.Color</td>
                <td>@product.StandardCost</td>
                <td>@product.Weight</td>
                <td>@product.SellEndDate</td>
                <td>@product.OrderCount.ToString()</td>
                <td><img src="data:image/png;base64,@product.ThumbNailPhotoBase64" /></td>
                <td><button type="button" class="btn btn-primary" @onclick="() => Edit(product.Id)">Edit</button> 
                    <button type="button" class="btn btn-danger" @onclick="() => Delete(product.Id)">Delete</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => View(product.Id)">View</button>
                </td>
            </tr>
        }
        </tbody>
    </table>

    <button type="button" class="btn btn-success" @onclick="Create">Create</button>

    <nav aria-label="...">
        <ul class="pagination">
            @if (CurrentPage < 3)
            {

            }
            <li class="page-item disabled">
                <a class="page-link" href="#" tabindex="-1">Previous</a>
            </li>

            <li class="page-item"><a class="page-link" href="#">1</a></li>
            <li class="page-item active">
                <a class="page-link" href="#">2 <span class="sr-only">(current)</span></a>
            </li>
            <li class="page-item"><a class="page-link" href="#">3</a></li>
            <li class="page-item">
                <a class="page-link" href="#">Next</a>
            </li>
        </ul>
    </nav>

}

@code {
    private List<ProductQueryResult> _data;
    private List<string> _errors = new List<string>();
    private int CurrentPage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentPage = 0;
        var command = new GetProductListCommand() { Filter = null, Includes = null, Page = CurrentPage };
        _data = await Mediator.Send(command);
    }

    public void Edit(int id)
    {
        NavManager.NavigateTo($"/Product/Edit/{id}");
    }

    public void View(int id)
    {
        NavManager.NavigateTo($"/Product/view/{id}");
    }

    private async Task Delete(int id)
    {
        var command = new DeleteProductCommand() { Id = id };
        var result =  await Mediator.Send(command);

        if (!result)
        {
            _errors.Add("Can't delete product");
        }
        else
        {
            _data.Remove(_data.First(x => x.Id == id));
        }
        StateHasChanged();
    }

    public void Create()
    {
        NavManager.NavigateTo($"/Product/create");
    }
}
